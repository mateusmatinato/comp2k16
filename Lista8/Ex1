/*******************
Nome: Mateus Matinato
Data: 18/01/2017
Lista 8
*******************/

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <time.h>

void Bolha(int vetor[], int n){
	int i,j,aux, trocas=0;
	for(i=0;i<n-1;i++)
		for(j=n-1;j>i;j--)
			if(vetor[j]<vetor[j-1]){
				aux = vetor[j-1];
				vetor[j-1] = vetor[j];
				vetor[j] = aux;
				trocas++;
			}
			//printf("Para ordenar esse vetor no método da bolha foram feitas %d trocas.\nVetor Ordenado por Bolha\n", trocas);
		/*	for(i=0;i<n;i++){
				printf("Vetor[%d]= %d\n",i,vetor[i]);
			} */
}

void Insercao(int vetor[], int n){
	int i,j,x,trocas=0;
	for(i=1;i<n;i++){
		x = vetor[i];
		for(j=i-1;j>=0 && vetor[j]>x; j--)
			vetor[j+1] = vetor[j];
		vetor[j+1] = x;
		trocas++;
	}
		/* printf("Para ordenar esse vetor no método de insercao foram feitas %d trocas.\nVetor Ordenado por Inserção\n", trocas);
		for(i=0;i<n;i++){
			printf("Vetor[%d]= %d\n",i,vetor[i]);
			} */
}

void Selecao(int vetor[], int n){
	int trocas = 0;
	 int i, j, min, x;
   for (i = 0; i < n-1; ++i) {
      min = i;
      for (j = i+1; j < n; ++j)
         if (vetor[j] < vetor[min]){
		   min = j;
		}
      x = vetor[i]; 
	  vetor[i] = vetor[min]; 
	  vetor[min] = x;
		trocas++;
   } 
	/*printf("Para ordenar esse vetor no método de seleção foram feitas %d trocas.\nVetor Ordenado por Seleção\n", trocas);
		for(i=0;i<n;i++){
			printf("Vetor[%d]= %d\n",i,vetor[i]);
			}
			*/
}

void ShellSort(int vetor[], int n){
	int I[10], k, i,j,incr,p,x, trocas=0;
	/*
	printf("\nOrdenação ShellSort\n");
	printf("Digite o número de passos: ");
	scanf("%d",&k);*/
	for(i=0,j=10;i<10;i++,j--){
/*
		printf("Incremento do passo %d: ",i+1);
		scanf("%d",&I[i]);
*/
	I[i] = j;
	}
	
	for(p=0;p<10;p++){
		incr = I[p];
		for(i=incr;i<n;i++){
			x = vetor[i];
			for(j=i-incr;j>=0 && x<vetor[j]; j = j-incr){
				vetor[j+incr] = vetor[j];
			}
			vetor[j+incr] = x;
			trocas++;
		}
	}
  /*	printf("Para ordenar esse vetor no método de seleção foram feitas %d trocas.\nVetor Ordenado por ShellSort\n", trocas);
		for(i=0;i<n;i++){
			printf("Vetor[%d]= %d\n",i,vetor[i]);
			} */
}

void quicksort(int v[], int esq, int dir){
	int i,j,x,aux;
	i = esq;
	j = dir;
	x = v[(i+j)/2];
	do{
		while(v[i]<x) i++;
		while(v[j]>x) j--;
		if(i<j){ //trocar
		aux = v[i];
		v[i] = v[j];
		v[j] = aux;
		}
		i++;
		j--;
	}while(i<j);
		if(i<dir) quicksort(v,i,dir);
		if(j>esq) quicksort(v,esq,j); 
}

/* void mergesort(int v[], int p,int q, int r){
	int i,j,k, *w;
	w = (int *)malloc((r-p)*sizeof(int));
	i = p;
	j = q;
	k = 0;
	while(i<q && j<r)
		if(v[i] < = v[j]) 
			w[k++] = v[i++];
			else w[k++] = v[j++];
	while(i<q) w[k++] = v[i++];
	while(j<r) w[k++] = v[j++];
		for(i=p;i<r;i++)
			v[i] = w[i-p];
			free(W);
} */

int buscaSeq(int vetor[], int x, int n){
	int i, encontrou=-1;
	for(i=0; i<n && encontrou==-1 ;i++){
		if(vetor[i]==x) encontrou = i; 
	}
	return encontrou;
}

int buscaBinaria(int vetor[], int x, int n){
	int e, m, d;
	e = 0; 
	d = n - 1;
	while(e<=d){
		m = (e+d)/2;
		if(vetor[m]==x) return m;
		if(vetor[m]<x) e = m + 1;
		else d = m - 1;
	}
	return -1;
}

void GerarVetorAleatoriamente(int vetor[],int n){
	int i, numero;
	 srand(time(NULL));
	for(i=0;i<n;i++){
		numero = (double) INT_MAX*rand()/(RAND_MAX+1.0);
		vetor[i] = numero;
		//printf("Vetor[%d] = %d\n",i,vetor[i]); 
	}

}

int VerificaOrdem(int vetor[], int n){
	int i, ordenado=1;
	for(i=0;i<n-1 && ordenado==1;i++){
		if(vetor[i]<vetor[i+1]) ordenado = 1;
		else ordenado = 0;
	}
	return ordenado;
}

double tempo(){
	return (double) clock()/CLOCKS_PER_SEC;
}

int main(){
	setlocale(LC_ALL, "Portuguese");
	int n, i, opcao, esq,cont, dir,compensa, v[200000];
	double duracao, tempobuscabin, tempobuscaseq,tempoinicial, tempoinicialbin, tempofinal,tempocorrente, tempototal, numero;
	
	cont = 0;
	compensa = 0;
	
	printf("Forneça o tempo máximo que o programa deverá executar: ");
	scanf("%lf", &duracao);
	printf("\nDuração dos testes = %.2f segundos\n",duracao);
	printf("\nEscolha o algoritmo a ser utilizado: \n");
	printf("\nBolha <1>");
	printf("\nSeleção <2>");
	printf("\nInserção <3>");
	printf("\nShell Sort <4>");
	printf("\nMergesort <5>");
	printf("\nQuicksort <6>");
	printf("\nTodos os métodos <7>");
	printf("\n");
	scanf("%d", &opcao);
	
	//gera um número aleatório para ser procurado no vetor
	numero = (double)INT_MAX*rand() /(RAND_MAX + 1.0);
	printf("\nNumero a ser procurado: %.2f\n",numero);
		switch(opcao){
			case 1:{
				tempoinicial = tempo();
				tempototal = 0;				
						printf("\nBolha:\n");
				for(n=2000;tempototal<=duracao;n=n+2000){
				GerarVetorAleatoriamente(v,n);
				
					//Busca Sequencial
				if(buscaSeq(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscaseq = tempo() - tempoinicial;
				printf("Tempo busca sequencial: %.2lf segundos.\n",tempobuscaseq);
					//Fim busca sequencial
					
				tempoinicialbin = tempo();
				//Ordenação por bolha
				Bolha(v,n);
				cont++;
				if(VerificaOrdem) printf("Vetor de %d posições está: Ordenado\n",n);
				else printf("Vetor de %d posições: Não está ordenado.\n",n);
				//Fim ordenação por bolha
				
				//Busca Binária
				if(buscaBinaria(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscabin = tempo() - tempoinicialbin;
				printf("Tempo busca binária: %.2lf segundos.\n",tempobuscabin);
							tempocorrente = tempo();
							tempototal = tempocorrente - tempoinicial;
							printf("O tempo total é de: %.6lf\n\n\n",tempototal);
				if(tempobuscabin < tempobuscaseq && compensa==0) compensa = n;
				//Fim busca binária
				
				}
				printf("Foram ordenados %d vetores em %.2lf segundos.\n",cont,duracao);
				if(compensa!=0)printf("\nA busca binária compensa a partir de um vetor de %d posições pelo método da bolha.\n",compensa);
				break;
			}	
			case 2:{
				tempoinicial = tempo();
				tempototal = 0;				
						printf("\nSeleção:\n");
				for(n=2000;tempototal<=duracao;n=n+2000){
				GerarVetorAleatoriamente(v,n);
				
					//Busca Sequencial
				if(buscaSeq(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscaseq = tempo() - tempoinicial;
				printf("Tempo busca sequencial: %.2lf segundos.\n",tempobuscaseq);
					//Fim busca sequencial
					
				tempoinicialbin = tempo();
				//Ordenação por SELEÇÃO
				Selecao(v,n);
				cont++;
				if(VerificaOrdem) printf("Vetor de %d posições está: Ordenado\n",n);
				else printf("Vetor de %d posições: Não está ordenado.\n",n);
				//Fim ordenação por SELEÇÃO
				
				//Busca Binária
				if(buscaBinaria(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscabin = tempo() - tempoinicialbin;
				printf("Tempo busca binária: %.2lf segundos.\n",tempobuscabin);
							tempocorrente = tempo();
							tempototal = tempocorrente - tempoinicial;
							printf("O tempo total é de: %.6lf\n\n\n",tempototal);
				if(tempobuscabin < tempobuscaseq && compensa==0) compensa = n;
				//Fim busca binária
				
				}
				printf("Foram ordenados %d vetores em %.2lf segundos.\n",cont,duracao);
				if(compensa!=0)printf("\nA busca binária compensa a partir de um vetor de %d posições pelo método de seleção.\n",compensa);
				break;
			}	
			case 3:{
				tempoinicial = tempo();
				tempototal = 0;				
						printf("\nInserção:\n");
				for(n=2000;tempototal<=duracao;n=n+2000){
				GerarVetorAleatoriamente(v,n);
				
					//Busca Sequencial
				if(buscaSeq(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscaseq = tempo() - tempoinicial;
				printf("Tempo busca sequencial: %.2lf segundos.\n",tempobuscaseq);
					//Fim busca sequencial
					
				tempoinicialbin = tempo();
				//Ordenação por inserção
				Insercao(v,n);
				cont++;
				if(VerificaOrdem) printf("Vetor de %d posições está: Ordenado\n",n);
				else printf("Vetor de %d posições: Não está ordenado.\n",n);
				//Fim ordenação por inserção
				
				//Busca Binária
				if(buscaBinaria(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscabin = tempo() - tempoinicialbin;
				printf("Tempo busca binária: %.2lf segundos.\n",tempobuscabin);
							tempocorrente = tempo();
							tempototal = tempocorrente - tempoinicial;
							printf("O tempo total é de: %.6lf\n\n\n",tempototal);
				if(tempobuscabin < tempobuscaseq && compensa==0) compensa = n;
				//Fim busca binária
				
				}
				printf("Foram ordenados %d vetores em %.2lf segundos.\n",cont,duracao);
				if(compensa!=0)printf("\nA busca binária compensa a partir de um vetor de %d posições pelo método da inserção.\n",compensa);
				break;
			}
			case 4:{ 			//Não sei como colocar o número de passos e os incrementos, então atribui 10 passos com incrementos começando em 10 e diminuindo até 1
				tempoinicial = tempo();
				tempototal = 0;				
						printf("\nShellSort:\n");
				for(n=2000;tempototal<=duracao;n=n+2000){
				GerarVetorAleatoriamente(v,n);
				
					//Busca Sequencial
				if(buscaSeq(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscaseq = tempo() - tempoinicial;
				printf("Tempo busca sequencial: %.2lf segundos.\n",tempobuscaseq);
					//Fim busca sequencial
					
				tempoinicialbin = tempo();
				//Ordenação por ShellSort
				ShellSort(v,n);
				cont++;
				if(VerificaOrdem) printf("Vetor de %d posições está: Ordenado\n",n);
				else printf("Vetor de %d posições: Não está ordenado.\n",n);
				//Fim ordenação por ShellSort
				
				//Busca Binária
				if(buscaBinaria(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscabin = tempo() - tempoinicialbin;
				printf("Tempo busca binária: %.2lf segundos.\n",tempobuscabin);
							tempocorrente = tempo();
							tempototal = tempocorrente - tempoinicial;
							printf("O tempo total é de: %.6lf\n\n\n",tempototal);
				if(tempobuscabin < tempobuscaseq && compensa==0) compensa = n;
				//Fim busca binária
				
				}
				printf("Foram ordenados %d vetores em %.2lf segundos.\n",cont,duracao);
				if(compensa!=0)printf("\nA busca binária compensa a partir de um vetor de %d posições pelo método do ShellSort.\n",compensa);
				break;
			}	
		/*	case 5:{
				printf("\nMergesort:\n");
				mergesort(v,p,q,r);
				break;
			}	*/
			case 6:{
				tempoinicial = tempo();
				tempototal = 0;				
						printf("\nQuicksort:\n");
				for(n=2000;tempototal<=duracao;n=n+2000){
				GerarVetorAleatoriamente(v,n);
				
					//Busca Sequencial
				if(buscaSeq(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscaseq = tempo() - tempoinicial;
				printf("Tempo busca sequencial: %.2lf segundos.\n",tempobuscaseq);
					//Fim busca sequencial
					
				tempoinicialbin = tempo();
				//Ordenação por quicksort
				quicksort(v,esq,dir);
				cont++;
				if(VerificaOrdem) printf("Vetor de %d posições está: Ordenado\n",n);
				else printf("Vetor de %d posições: Não está ordenado.\n",n);
				//Fim ordenação por quicksort
				
				//Busca Binária
				if(buscaBinaria(v,numero,n)!=-1)printf("O número %.2f foi encontrado no vetor.\n",numero);
				else printf("O número %.2f não foi encontrado no vetor.\n",numero);
				tempobuscabin = tempo() - tempoinicialbin;
				printf("Tempo busca binária: %.2lf segundos.\n",tempobuscabin);
							tempocorrente = tempo();
							tempototal = tempocorrente - tempoinicial;
							printf("O tempo total é de: %.6lf\n\n\n",tempototal);
				if(tempobuscabin < tempobuscaseq && compensa==0) compensa = n;
				//Fim busca binária
				
				}
				printf("Foram ordenados %d vetores em %.2lf segundos.\n",cont,duracao);
				if(compensa!=0)printf("\nA busca binária compensa a partir de um vetor de %d posições pelo método do quicksort.\n",compensa);
				break;
			}
			case 7:{
				printf("\nTodos os metodos:\n");
				Bolha(v,n);
				Selecao(v,n);
				Insercao(v,n);
				ShellSort(v,n);
			//	mergesort(v,p,q,r);
				quicksort(v,esq,dir);
				break;
			}			
		}
	system("pause");
	return 0;
}
